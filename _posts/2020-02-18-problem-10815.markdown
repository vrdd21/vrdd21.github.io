---
layout: post
title:  "Problem #10815"
description:
date:   2020-02-18 17:57:00 +0530
categories: C++
---

### 숫자 카드
###### [문제 사이트](https://www.acmicpc.net/problem/10815)

- - -

### 문제 유형

- - -

이분 탐색 (Binary Search)

- - -

### 문제 설명

- - -

**시간 제한** : 2초
**메모리 제한** : 256MB

숫자 카드는 정수 하나가 적혀져 있는 카드이다. 상근이는 숫자 카드 N개를 가지고 있다. 정수 M개가 주어졌을 때, 이 수가 적혀있는 숫자 카드를 상근이가 가지고 있는지 아닌지를 구하는 프로그램을 작성하시오.

첫째 줄에 상근이가 가지고 있는 숫자 카드의 개수 N(1 ≤ N ≤ 500,000)이가 주어진다. 둘째 줄에는 숫자 카드에 적혀있는 정수가 주어진다. 숫자 카드에 적혀있는 수는 -10,000,000보다 크거나 같고, 10,000,000보다 작거나 같다. 두 숫자 카드에 같은 수가 적혀있는 경우는 없다.

셋째 줄에는 M(1 ≤ M ≤ 500,000)이 주어진다. 넷째 줄에는 상근이가 가지고 있는 숫자 카드인지 아닌지를 구해야 할 M개의 정수가 주어지며, 이 수는 공백으로 구분되어져 있다. 이 수도 -10,000,000보다 크거나 같고, 10,000,000보다 작거나 같다

**요약**
주어진 M 개의 정수 중 상근이가 가지고 있는 N개의 숫자와 겹치는 것을 찾고 출력해라.

- - -

### 문제 풀이

- - -

**Motive**
M 개의 정수와 N 개의 정수를 일일이 비교한다면 시간 복잡도는 O(M*N)이다. 데이터셋의 최대 경우를 생각해보면 500,000 * 500,000인데 2500억이 나온다. 1억번 계산에 1초라고 한다면 2500초가 되므로 문제의 제한시간인 2초를 훌쩍 넘긴다.

따라서 N을 정렬한 후 그 안에서 M 개의 정수를 이분 탐색하면 시간 복잡도는 O(M*log(N)), 285만 번의 계산 횟수가 나와 시간 제한을 만족할 수 있다.

**일반 이분탐색**
```
#include <iostream>
#include <algorithm>
#include <cstring>

using namespace std;

int main(void)
{
	int n, m;
	int* card, * filter, * answer;
  // card는 N개의 정수를, filter는 M개의 정수를 담을 것이다.

	scanf("%d", &n);

	card = new int[n];

	for (int i = 0; i < n; i++)
	{
		scanf("%d", &card[i]);
	}

	scanf("%d", &m);

	filter = new int[m];
	answer = new int[m];

	memset(answer, 0, sizeof(answer)); // 혹시 모르니 answer의 값을 0으로 초기화

	for (int i = 0; i < m; i++)
	{
		scanf("%d",&filter[i]);
	}

	sort(card, card + n); // 정렬 복잡도 nlog(n)

	int low, high, med;

  /*
    filter의 원소를 하나하나 target으로 설정한다.
    card의 중간값과 target을 비교한 후 만약 target이 중간값보다 작다면 중간 인덱스 보다 왼쪽(정렬되어있으므로)에 있다는 것을 뜻한다. 중간값보다 큰 경우는 오른쪽에 있다는 것을 의미하는 데 이것을 반복하면 target이 있는 위치에 도달할 수 있다.
  */
	for (int i = 0; i < m; i++)
	{
		low = 0, high = n;
		while (1)
		{
			if (low > high)
			{
				answer[i] = 0;
				break;
			}

			med = (low + high) / 2;

			if (card[med] == filter[i])
			{
				answer[i] = 1;
				break;
			}
			else if (card[med] < filter[i])
			{
				low = med + 1;
			}
			else
			{
				high = med - 1;
			}
		}
	}

	for (int i = 0; i < m; i++)
		printf("%d ", answer[i]);
	return 0;
}
```

이 알고리즘은 304 ms의 시간이 걸렸다.

시간을 더 줄일 수는 없을까? 마침 하나의 아이디어가 떠올랐다.

N개의 정수, M 개의 정수를 각각 N 집합, M 집합이라 칭하겠다.
1. N 집합과 M 집합을 정렬한다.
2. M 집합의 중간값을 target으로 N 집합에 대해 이분 탐색을 진행한다.
3. 만약 M 집합의 중간값을 N 집합에서 찾았다면 N 집합은 해당 인덱스에서 왼쪽과 오른쪽 서브셋으로 나누고 M 집합은 target으로 설정된 중간값에서 왼쪽과 오른쪽 서브셋을 나눈다.
4. 만약 찾지 못했다면 M개의 중간값에서만 왼쪽과 오른쪽 서브셋을 나눈다.
5. 각각의 서브셋에 대해 1~4를 반복한다.

이를 통해 시간복잡도 O(log(n)*log(m))을 달성할 수 있을거라 생각했다.

![first image](/assets/img/10815_1.png)
![second image](/assets/img/10815_2.png)

```
#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstring>

using namespace std;

class Card
{
public:
	int number;
	int origin_order;
};

bool cmp(const Card& a, const Card& b)
{
	if (a.number < b.number)
		return true;
	else
		return false;
}

/*
	여기서 low, high는 c의 값이다.
*/
int BinarySearch(int low, int high, int target, Card* c)
{
	int med = (low + high) / 2;
	if (low > high)
		return -1;

	if (c[med].number == target)
		return med;
	else if (c[med].number < target)
		return BinarySearch(med + 1, high, target, c);
	else
		return BinarySearch(low, med - 1, target, c);
}

/*
*/
void BinaryFilter(int low_c, int high_c, int low_filter, int high_filter, int* answer, Card* c, Card* filter)
{
	int med = (low_filter + high_filter) / 2;
	int limit = BinarySearch(low_c, high_c, filter[med].number, c);

	if (low_c > high_c)
		return;

	if (low_filter > high_filter)
		return;

	if (limit == -1)
	{
		/*
			c의 공간은 그대로 하되 filter는 subset으로 나눈다.
		*/
		answer[filter[med].origin_order] = 0;
		BinaryFilter(low_c, high_c, low_filter, med - 1, answer, c, filter);
		BinaryFilter(low_c, high_c, med + 1, high_filter, answer, c, filter);
	}
	else
	{
		/*
			c의 공간과 filter의 공간을 각각 subset한 후 각각 다시 매칭시작
		*/
		answer[filter[med].origin_order] = 1;
		BinaryFilter(low_c, limit - 1, low_filter, med - 1, answer, c, filter);
		BinaryFilter(limit + 1, high_c, med + 1, high_filter, answer, c, filter);
	}
}

int main(void)
{
	int n, m;
	int* answer;
	Card *c, *filter;

	scanf("%d", &n);

	c = new Card[n];

	for (int i = 0; i < n; i++)
	{
		scanf("%d", &c[i].number);
		c[i].origin_order = i;
	}

	scanf("%d", &m);

	answer = new int[m] {100, };
	filter = new Card[m];

	for (int i = 0; i < m; i++)
	{
		scanf("%d", &filter[i].number);
		filter[i].origin_order = i;
	}

	sort(c, c + n, cmp);
	sort(filter, filter + m, cmp);

	BinaryFilter(0, n-1, 0, m-1, answer, c, filter);

	for (int i = 0; i < m; i++)
		printf("%d\n", answer[i]);

	return 0;
}
```

결과는 참담하게 356 ms.

아무래도 함수를 너무 많이 쓴 것이 요인이 아닐까 생각해본다.

- - -

### 개선할 부분

- - -

이러이러한게 아쉬웠고 아니면 시간복잡도나 공간복잡도 제한이 추가된다면 이렇게 풀긴 힘들거같아요

- - -
